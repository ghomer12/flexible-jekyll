I"j"
<html lang="en">
    <head>
        <meta charset="utf-8" />
        <title>d3 Updating Bar Chart With Dropdown</title>
        <script src="https://d3js.org/d3.v3.min.js" charset="utf-8"></script>
        <style>
        body {
            font: 14px sans-serif;
        }
        select {
            display: block;
        }
        .bar {
            fill: purple;
            opacity: 0.8;
        }

        .axis path,
        .axis line {
            fill: none;
            stroke: #000;
            shape-rendering: crispEdges;
        }
        </style>
    </head>
    <body>
        <div id="vis-container"></div>
        <script type="text/javascript">
            // Load and munge data, then make the visualization.
            "https://raw.githubusercontent.com/ghomer12/Top10MaritalStatusByOCC/main/top10Counts_2000_2019.csv"

            d3.csv("https://raw.githubusercontent.com/ghomer12/Top10MaritalStatusByOCC/main/top10Counts_2000_2019.csv"
, function(error, data) {
                // var cerealMap = {};
                console.log(data)
                data.forEach(function(d) {
                d.Count = +d.Count;
                d.MaritalStatus = d.MaritalStatus;
                d.OCC = d.OCC;
            });


            var nest = d3.nest()
                .key(function(d){
                    return d.MaritalStatus;
                })
                .entries(data)
            console.log(nest)

            const xValues = []
            const yValues = []
            for (i=0; i<nest[0].values.length; i++){
                console.log(nest[0].values[i]['OCC'])
                xValues.push(nest[0].values[i]['OCC'])
                yValues.push(nest[0].values[i]['Count'])
            }


            var map = {};

            for (j=0; j<nest.length; j++){
                console.log(nest[j].key)
                const yValues = []
                const xValues = []

                for (i=0; i<12; i++){
                    xValues.push(nest[j].values[i]['OCC'])
                    yValues.push(nest[j].values[i]['Count'])
            }
                map[nest[j].key] = [xValues, yValues]
            }
            console.log(map)
                makeVis(map);
            });

            var makeVis = function(map) {
                // Define dimensions of vis
                var margin = { top: 30, right: 50, bottom: 400, left: 50 },
                    width  = 1000 - margin.left - margin.right,
                    height = 650 - margin.top  - margin.bottom;


                // Make x scale
                var xScale = d3.scale.ordinal()
                    // .domain(xValues)
                    .rangeRoundBands([0, width], 0.1);

                // Make y scale, the domain will be defined on bar update
                var yScale = d3.scale.linear()
                .domain([0, 20]) 
                    .range([height, 0]);

                // Create canvas
                var canvas = d3.select("#vis-container")
                  .append("svg")
                    .attr("width",  width  + margin.left + margin.right)
                    .attr("height", height + margin.top  + margin.bottom)
                  .append("g")
                    .attr("transform", "translate(" + margin.left + "," + margin.top + ")");

                // const xValues = map['Maried Spouse Present'][0]

                // Make x scale
                // Make x scale
                // const xValues = map['Divorced'][0]

                
                var xScale = d3.scale.ordinal()
                    .rangeRoundBands([0, width], 0.1);

                // Make x-axis and add to canvas
                var xAxis = d3.svg.axis()
                    .scale(xScale)
                    .orient("bottom");

                var x = canvas.append("g")
                    .attr("class", "x axis")
                    .attr("transform", "translate(0," + height + ")")
                    

                // Make y-axis and add to canvas
                var yAxis = d3.svg.axis()
                    .scale(yScale)
                    .orient("left");

                var yAxisHandleForUpdate = canvas.append("g")
                    .attr("class", "y axis")
                    .call(yAxis);

                var updateBars = function(data, occ, newCereal) {
                    console.log(data)

                    xScale.domain(occ)
                    x.call(xAxis).selectAll("text")	
                        .style("text-anchor", "end")
                        .attr("dx", "-.8em")
                        .attr("dy", ".15em")
                        .attr("transform", "rotate(-70)");
console.log(d3.extent(data))
                    // First update the y-axis domain to match data
                    // yScale.domain( d3.extent(data) );
                    yScale.domain([0, 20]);

                    yAxisHandleForUpdate.call(yAxis);

                    var bars = canvas.selectAll(".bar").data(data);

                    // Add bars for new data
                    bars.enter()
                      .append("rect")
                        .attr("class", "bar")
                        .attr("x", function(d,i) { return xScale( map[newCereal][0][i] ); })
                        .attr("width", xScale.rangeBand())
                        .attr("y", function(d,i) { return yScale(d); })
                        .attr("height", function(d,i) { return height - yScale(d); });

                    // Update old ones, already have x / width from before
                    bars
                        .transition().duration(250)
                        .attr("y", function(d,i) { return yScale(d); })
                        .attr("height", function(d,i) { return height - yScale(d); });

                    // Remove old ones
                    bars.exit().remove()
                    // d3.selectAll("text").remove():
                };



                // Handler for dropdown value change
                var dropdownChange = function() {
                    var newCereal = d3.select(this).property('value'),
                        newData   = map[newCereal][1]
                        newOCC = map[newCereal][0];
                        console.log(newOCC)

                    updateBars(newData, newOCC, newCereal)
                                    };

                // Get names of cereals, for dropdown
                var MeritalStatus = Object.keys(map).sort();

                var dropdown = d3.select("#vis-container")
                    .insert("select", "svg")
                    .on("change", dropdownChange);

                dropdown.selectAll("option")
                    .data(MeritalStatus)
                  .enter().append("option")
                    .attr("value", function (d) { return d; })
                    .text(function (d) {
                        return d[0].toUpperCase() + d.slice(1,d.length); // capitalize 1st letter
                    });
                console.log(map['Maried Spouse Present'][1])
                var initialData = map['Divorced'][1];
                updateBars(map['Divorced'][1], map['Divorced'][0], 'Divorced');
            };
        </script>
    </body>
</html>

<h2 id="motivation">Motivation</h2>
<p>It’s important that young people of every race and background see themselves in authority figures. Unfortunately, American teachers are not as diverse as the populations that they serve.  I visualized the racial breakdown of America’s educator’s state to state.</p>

<h2 id="the-graph">The Graph</h2>
<p>I built the choropleth using D3.js, HTML, and css after cleaning the csv file in python.  The color scale is based on the number of teachers per state.  The darker colors represents more teachers, the lighter colors represent that there are fewer teachers in that state, and the grey states represent states that did not have any data from my data source.  When you hover your mouse over each state, a bar graph shows the demographic breakdown of teachers in that state.</p>

<h2 id="takeaway-questions">Takeaway Questions</h2>
<ul>
  <li>Why is teaching so heavily white?</li>
  <li>Why is teaching so attractive to white people?</li>
  <li>How can we as a nation take strides to attract a population of educators that better represent the students that they teach?</li>
</ul>

<h2 id="observations">Observations</h2>
<ul>
  <li>The lighter-colored states tended to have a higher percentage of white teachers.</li>
  <li>Texas both has the most number of teachers and the greatest teacher diversity nation-wide.</li>
</ul>

<h2 id="github-code">Github Code</h2>
<ul>
  <li>Data Source: https://nces.ed.gov/surveys/sass/tables/sass1112_2013314_t1s_001.asp</li>
  <li>Git Repository: https://github.com/ghomer12/D3_TeacherChoropleth1</li>
</ul>

:ET